CF::MinimumSize = 0.5
CF::Impure = 1
CF::Background = [hue 163 b -.9 saturation 0]

Pl=200
Pn=70000
Pa=0.1
Po=5000..30000

PALETTE=(
// hue, sat , b
  (222, 0.75, 0.3)  ,
  (0  , 0   , 1)    ,
  (169, 0.63, 0.38) ,
  (75 , 0.39, 0.67) ,
  (0  , 0   , 1)    ,
  (89 , 0.14, 0.88) ,
  (222, 0.57, 0.6)  ,
  (350, 0.13, 0.93) ,
  (0  , 0   , 1)    ,
  (30 , 0.95, 0.99) ,
  (55 , 0.33, 0.80) ,
  (0  , 0   , 1)    ,
  (13 , 0.39, 0.82) ,
  (18 , 0.93, 0.9)
)
PAL_NUM=14

vector3 col(u, v) = PALETTE[floor(max(0,min(0.999,
                            perlin(u+Po, v+Po, 1, 20, 7)*0.9
                            ))*PAL_NUM)*3,3]

startshape flowfield []

shape flowfield {

//  SQUARE [ hue col(0.1, 0) x 1 ]
//  SQUARE [ hue col(0.2, 0) x 2 ]
//  SQUARE [ hue col(0.3, 0) x 3 ]
//  SQUARE [ hue col(0.4, 0) x 4 ]
//  SQUARE [ hue col(0.5, 0) x 5 ]
//  SQUARE [ hue PALETTE[1*3,3] x 1 y 1]
//  SQUARE [ hue PALETTE[2*3,3] x 2 y 1]
//  SQUARE [ hue PALETTE[3*3,3] x 3 y 1]
//  SQUARE [ hue PALETTE[4*3,3] x 4 y 1]
//  SQUARE [ hue PALETTE[5*3,3] x 5 y 1]
  loop Pn [] {
    xx=-50..50
    yy=-50..50
    //SQUARE [ x xx yy hue col(xx,yy) ]
    flowline(xx, yy, Pl) [hue col(xx,yy) blend CF::Normal]
  }
}

shape flowline(number xx, number yy, number t) {
  CIRCLE [ x xx y yy a -(1-Pa) z -0.001 s 0.1 ]
  if( t > 0 ) flowline(
    xx + (-0.01..0.01) + (perlin(xx+Po*1, yy+Po*1, t/50, 5, 4)-0.5)*0.3,
    yy + (-0.01..0.01) + (perlin(xx+Po*2, yy+Po*2, t/50, 5, 4)-0.5)*0.3 - 0.04,
    t - 1 ) [ ]
}

sanity_offset=30000 //perlin noise produces odd results at origin point
number perlin(xx, yy, zz, scale, oct) =
  perlin_loop(xx+sanity_offset,yy+sanity_offset,zz+sanity_offset,scale,oct)/2
number perlin_loop(xx, yy, zz, scale, oct) = if(oct < 1, 0,
  noise(xx, yy, zz, scale/(1.4^oct))/(1.4^oct) + perlin_loop(xx, yy, zz, scale, oct-1)
)

number noise(xx, yy, zz, scale) = let(
  xi = floor(xx/scale); yi = floor(yy/scale); zi = floor(zz/scale);
  xf = xx/scale - xi;   yf = yy/scale - yi;   zf = zz/scale - zi;
  lerp(lerp(lerp(randxy(xi, yi  , zi  ), randxy(xi+1, yi  , zi  ), xf),
            lerp(randxy(xi, yi+1, zi  ), randxy(xi+1, yi+1, zi  ), xf), yf),
       lerp(lerp(randxy(xi, yi  , zi+1), randxy(xi+1, yi  , zi+1), xf),
            lerp(randxy(xi, yi+1, zi+1), randxy(xi+1, yi+1, zi+1), xf), yf), zf))

lerp(v1, v2, t) = (1-t)*v1 + t*v2

rand_p1=25889
rand_p2=26903
rand_p3=22907
number randxy(xx, yy, zz) =
  mod(bitxor(bitxor(xx*(xx+rand_p1)+rand_p3,
                    yy*(yy+rand_p2)+rand_p1),
                    zz*(zz+rand_p3)+rand_p2),10000)/10000
